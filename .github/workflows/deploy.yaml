name: Deploy to Azure VM

on:
  push:
    branches:
      - main  # Change this to your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      USERNAME: ${{ secrets.VM_USERNAME }}
      SSH_PRIVATE_KEY: ${{ secrets.AZURE_VM_SSH_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}


    - name: Delete existing .env file (if exists)
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/azure_vm_key ${{ env.USERNAME }}@${{ env.VM_PUBLIC_IP }} << 'EOF'
        cd /home/${{ env.USERNAME }}/project
        if [ -f .env ]; then
          rm .env
        fi
        EOF

    - name: Create .env file
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }}" >> .env
        echo "CHAT_GPT_KEY=${{ secrets.CHAT_GPT_KEY }}" >> .env
        echo "GOOGLE_SSO_CLIENT_ID=${{ secrets.GOOGLE_SSO_CLIENT_ID }}" >> .env
        echo "GOOGLE_SSO_PROJECT_ID=${{ secrets.GOOGLE_SSO_PROJECT_ID }}" >> .env
        echo "GOOGLE_SSO_CLIENT_SECRET=${{ secrets.GOOGLE_SSO_CLIENT_SECRET }}" >> .env
        echo "APP_PASSWORD=${{ secrets.APP_PASSWORD }}" >> .env
        echo "OUTLOOK_CLIENT_ID=${{ secrets.OUTLOOK_CLIENT_ID }}" >> .env
        echo "OUTLOOK_CLIENT_SECRET=${{ secrets.OUTLOOK_CLIENT_SECRET }}" >> .env

    - name: Copy files to Azure VM
      run: |
        scp -o StrictHostKeyChecking=no -i ~/.ssh/azure_vm_key -r . ${{ env.USERNAME }}@${{ env.VM_PUBLIC_IP }}:/home/${{ env.USERNAME }}/project

    - name: Deploy with Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/azure_vm_key ${{ env.USERNAME }}@${{ env.VM_PUBLIC_IP }} << 'EOF'
        cd /home/${{ env.USERNAME }}/project
        docker-compose stop && docker-compose up -d --build
        EOF
